@page "/SubForumDetails/{subId:int}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@inject ISubForumService subForumService;
@inject IPostService postService;
@inject IUserService userService;
@inject NavigationManager navMgr

<div>
    <AuthorizeView>
        <Authorized>
        <button @onclick="@(() => navMgr.NavigateTo($"/PostCreation/{SubId}"))">Create a Post!</button>
        </Authorized>
    </AuthorizeView>
</div>

@if (subForum != null)
{
    <h1>
        <strong>@subForum.Title</strong>
    </h1>
    <p>
        @* u/@(subForum.Owner != null ? subForum.Owner.UserName : "Unknown User") *@
    </p>
    <br>
    
    <p>
        @subForum.Description
    </p>

    <hr/>
}

@if (posts == null)
{
    <p>No posts to display.</p>
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Posts</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr>
                <td @onclick="@(() => navMgr.NavigateTo($"/PostDetails/{@item.Id}"))">
                    <h5>@item.Title</h5>
                    @* <p>u/@item.Owner.UserName</p> *@
                    <p>@item.Content</p>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    [Parameter]
    public int SubId { get; set; }

    private SubForum? subForum;
    private IEnumerable<Post>? posts;
    private string msg = "";
    private string rmsg = "";
    private string title, content;
    

    private async Task LoadPosts()
    {
        try
        {
            subForum = await subForumService.GetByIdAsync(SubId);
            posts = await postService.GetAsync(null, null, null, SubId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    

    
}
@page "/PostDetails/{postId:int}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@inject IPostService postService;
@inject ICommentService commentService;
@using System.Security.Claims
<h3>PostDetails</h3>

@if (post != null)
{
    <h1>
        <strong>@post.Title</strong>
    </h1>

    <p>
        @post.Content
    </p>

    <hr/>
}

@if (comments == null)
{
    <p>Loading comments...</p>
}
else if (!comments.Any())
{
    <p>No comments to display.</p>
}
else
{
    <br>
    <h1>Comments:</h1>
    <AuthorizeView>
        <Authorized>
            <br>
            <span>
                <br>
                <h3>Leave a comment!</h3><br>
                <input type="text" @bind="message" @bind:event="oninput" placeholder="Write your comment..."/>
                <button @onclick="@(() => Create(context.User.Claims.First(claim => claim.Type == "Id").Value))" disabled="@(string.IsNullOrEmpty(message))" class="acceptbtn">Post</button>
            </span>
            <table class="table">
                <tbody>
                @foreach (var comment in comments)
                {
                    <tr>
                        <td>
                            <h4>@comment.Owner.UserName</h4><br>@comment.Content
                        </td>
                    </tr>

                }
                </tbody>
            </table>
        </Authorized>
        <NotAuthorized>
            <h3>Please log in in order to view and post comments.</h3>
        </NotAuthorized>
    </AuthorizeView>
}

@if (!string.IsNullOrEmpty(resultMsg))
{
    <label style="color: red">@resultMsg</label>
}



@code {

    [Parameter]
    public int postId { get; set; }

    private string resultMsg = "";
    private IEnumerable<Comment>? comments;
    private string message = "";

    private Post? post;

    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
        await LoadComments();
    }

    private async Task LoadPost()
    {
        post = await postService.GetPostAsync(postId);
    }

    private async Task LoadComments()
    {
        try
        {
            comments = await commentService.GetAsync(null, postId, null, null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

    private async Task Create(string id)
    {
        resultMsg = "";
        int ownerId = int.Parse(id);
        try
        {
            CommentCreationDto dto = new CommentCreationDto(ownerId, postId, message);
            Comment comment = await commentService.CreateAsync(dto);
            message = "";
            resultMsg = "Message successfully posted";
            comments = comments.Append(comment);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

}